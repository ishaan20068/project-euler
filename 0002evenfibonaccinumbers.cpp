/*
Each new term in the Fibonacci sequence is generated by adding the 
previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not 
exceed four million (4000000), find the sum of the even-valued terms.
in general find the sum of all the even fibonacci numbers not exceeding n

solution
First note that all the terms that are even are at a
position 3k+2 in the sequence
also note the following series conversion:

F_{3K+2}=F_{3K}+F_{3K+1}=3F_{3K-1}+2F_{3K-2}
F_{3K+2}=3F_{3K-1}+2F_{3K-2}
F_{3K+2}=3F_{3K-1}+2(2F_{3K-4}+F_{3K-5})
F_{3K+2}=3F_{3K-1}+4(F_{3K-4}+F_{3K-7}+...+F_2)+2F_1
F_{3K+2}=3F_{3K-1}+4(F_{3K-4}+F_{3K-7}+...+F_2)+2
So, we also have by the above relation that :
F_{3K-1}=3F_{3K-4}+4(F_{3K-7}+...+F_2)+2
F_{3K-1}-2=-F_{3K-4}+4(F_{3K-4}+F_{3K-7}+...+F_2)
F_{3K-1}-2+F_{3K-4}=(F_{3K+2}-3F_{3K-1}-2)
F_{3K-1}+F_{3K-4}=F_{3K+2}-3F_{3K-1}
4F_{3K-1}+F_{3K-4}=F_{3K+2}

So, from the above recurrence relation we can see that
if a_i is the sequence of even fibonacci numbers then 
a_i=4a_{i-1}+a_{i-2}
we use this recurrence relation to solve this problem
*/


#include<bits/stdc++.h>
using namespace std;
#define fast            ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define int             long long
#define o(x)            cout<<x<<endl;
typedef vector<int>                     vll;

void ans(){
    int n;
    cin>>n;
    vll fib(n,0);
    fib.push_back(2);
    fib.push_back(8);
    while(4*fib[fib.size()-1]+fib[fib.size()-2]<=n){
        fib.push_back(4*fib[fib.size()-1]+fib[fib.size()-2]);

    }
    int sum=0;
    for(auto i:fib){
        sum+=i;
    }
    o(sum)
}
int32_t main(){
    fast
    int t=1;
    for(int i=0;i<t;i++){ans();}
    return 0;
}
